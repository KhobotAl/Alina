#include <iostream> // Бібліотека для роботи з введенням/виведенням
#include <cmath> // Бібліотека для математичних функцій
using namespace std;

// Param70: Реалізація функції AreaN
double AreaN(TPoint P[], int N) {
    double area = 0.0; // Загальна площа багатокутника

    // Перевірка: багатокутник повинен мати принаймні 3 вершини
    if (N < 3) return 0.0;

    // Розбиваємо N-кутник на (N-2) трикутники з базовою точкою P[0]
    for (int i = 1; i < N - 1; i++) {
        // Формуємо трикутник T з вершин P[0], P[i], P[i+1]
        TTriangle T;
        T.A = P[0];
        T.B = P[i];
        T.C = P[i + 1];

        // Обчислюємо площу трикутника за формулою векторного добутку
        double triangleArea = 0.5 * fabs(
            (T.B.X - T.A.X) * (T.C.Y - T.A.Y) -
            (T.C.X - T.A.X) * (T.B.Y - T.A.Y)
        );

        // Додаємо площу цього трикутника до загальної площі
        area += triangleArea;
    }

    return area; // Повертаємо загальну площу багатокутника
}

// Основна функція
void runTask1() {
    // Вхідні дані: координати трьох опуклих багатокутників

    // Багатокутник 1: прямокутник (4 вершини)
    TPoint polygon1[] = {
        {0, 0},
        {4, 0},
        {4, 3},
        {0, 3}
    };
    int n1 = 4; 

    // Багатокутник 2: п’ятикутник (5 вершин)
    TPoint polygon2[] = {
        {1, 0},
        {4, 1},
        {3, 4},
        {0, 4},
        {-1, 1}
    };
    int n2 = 5;

    // Багатокутник 3: шестикутник (6 вершин)
    TPoint polygon3[] = {
        {0, 0},
        {2, 0},
        {3, 2},
        {2, 4},
        {0, 4},
        {-1, 2}
    };
    int n3 = 6;

    // Виведення площ кожного багатокутника
    cout << "Площа багатокутника 1: " << AreaN(polygon1, n1) << endl;
    cout << "Площа багатокутника 2: " << AreaN(polygon2, n2) << endl;
    cout << "Площа багатокутника 3: " << AreaN(polygon3, n3) << endl;

}
