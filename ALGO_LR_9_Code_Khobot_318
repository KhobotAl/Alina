#include <iostream>
#include <Windows.h>

using namespace std;

size_t my_find(const char* source, const char* target, size_t pos = 0) {
    // Обчислення довжини source
    size_t source_len = 0;
    while (source[source_len] != '\0') source_len++;

    // Обчислення довжини target
    size_t target_len = 0;
    while (target[target_len] != '\0') target_len++;

    if (target_len == 0 || target_len > source_len) return string::npos;

    for (size_t i = pos; i <= source_len - target_len; ++i) {
        size_t j = 0;
        while (j < target_len && source[i + j] == target[j]) {
            ++j;
        }
        if (j == target_len) {
            return i; // Знайдено входження
        }
    }
    return string::npos; // Не знайдено
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "");

    const char* text = "Hello, world!";
    const char* word = "world";
    
    size_t result = my_find(text, word);

    if (result != string::npos) {
        cout << " Слово знайдено на позиції:: " << result << endl;
    } else {
        cout << "Не знайдено." << endl;
    }

    return 0;
}

Лістинг коду до завдання 2.А

#include <iostream>
#include <string>
#include <locale>
#include <Windows.h> // Додаємо для SetConsoleCP

using namespace std;

string processString(const string& input) {
    setlocale(LC_ALL, ""); // Встановлення локалі для роботи з кирилицею

    string result;
    size_t i = 0;

    while (i < input.length()) {
        // Копіюємо всі пробіли (щоб зберегти їх кількість між словами)
        while (i < input.length() && input[i] == ' ') {
            result += ' ';
            ++i;
        }

        // Початок слова
        size_t start = i;

        // Знаходимо кінець слова
        while (i < input.length() && input[i] != ' ') {
            ++i;
        }

        // Якщо слово знайдено
        if (start < i) {
            string word = input.substr(start, i - start);
            if (!word.empty()) {
                char firstChar = word[0];
                for (size_t j = 0; j < word.length(); ++j) {
                    if (j != 0 && word[j] == firstChar)
                        result += '.';
                    else
                        result += word[j];
                }
            }
        }
    }

    return result;
}

int main() {
    // Встановлення кодування консолі
    SetConsoleCP(1251); 
    SetConsoleOutputCP(1251); 
    setlocale(LC_ALL, ""); 

    string input = "МИНИМУМ  ТЕСТ  ПРИКЛАД";
    string output = processString(input);
    cout << output << endl; 
    return 0;
}

Лістинг коду до завдання 2.В

// Функція перевірки вхідного рядка
bool isValidInput(const string& input) {
    for (char c : input) {
        if (c == ' ')
            continue;

        unsigned char uc = static_cast<unsigned char>(c);
        if (!((uc >= 192 && uc <= 223) || uc == 168 || uc == 170 || uc == 175 || uc == 178)) {
            return false;
        }
    }
    return true;
}
Лістинг коду до завдання 2.D
#include <iostream>
#include <string>
#include <locale>
#include <Windows.h>
#include <fstream>

using namespace std;

// Функція обробки рядка (заміна повторень першої літери на '.')
string processString(const string& input) {
    setlocale(LC_ALL, "");

    string result;
    size_t i = 0;

    while (i < input.length()) {
        // Копіюємо всі пробіли
        while (i < input.length() && input[i] == ' ') {
            result += ' ';
            ++i;
        }

        size_t start = i;

        while (i < input.length() && input[i] != ' ') {
            ++i;
        }

        if (start < i) {
            string word = input.substr(start, i - start);
            if (!word.empty()) {
                char firstChar = word[0];
                for (size_t j = 0; j < word.length(); ++j) {
                    if (j != 0 && word[j] == firstChar)
                        result += '.';
                    else
                        result += word[j];
                }
            }
        }
    }

    return result;
}

// Функція перевірки вхідного рядка
bool isValidInput(const string& input) {
    for (char c : input) {
        if (c == ' ')
            continue;

        unsigned char uc = static_cast<unsigned char>(c);
        if (!((uc >= 192 && uc <= 223) || uc == 168 || uc == 170 || uc == 175 || uc == 178)) {
            return false;
        }
    }
    return true;
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "");

    // Створення текстового файлу з 10 прикладами
    ofstream outFile("input.txt");
    if (outFile.is_open()) {
        outFile << "МИНИМУМ ТЕСТ ПРИКЛАД\n";
        outFile << "АААА БББ ВВВВ\n";
        outFile << "СЛОВО  ЗРАЗОК\n";
        outFile << "ПРИВІТ  СВІТ\n";
        outFile << "ТЕСТУВАННЯ КОДУ\n";
        outFile << "КОНТРОЛЬНА  РОБОТА\n";
        outFile << "ДАНІ  ІНФОРМАЦІЯ\n";
        outFile << "КОМПІЛЯТОР  ПРОГРАМА\n";
        outFile << "КИРИЛИЦЯ  ПРОБІЛИ\n";
        outFile << "СТРОКА  ПЕРЕВІРКА\n";
        outFile.close();
        cout << "Файл 'input.txt' створено з прикладами рядків.\n";
    }
    else {
        cout << "Помилка відкриття файлу для запису.\n";
    }

    int choice;
    string input;

    do {
        cout << "\n=== МЕНЮ ===\n";
        cout << "1. Ввести рядок\n";
        cout << "2. Перевірити рядок\n";
        cout << "3. Обробити рядок\n";
        cout << "4. Обробити файл та зберегти результат\n";
        cout << "0. Вихід\n";
        cout << "Ваш вибір: ";
        cin >> choice;
        cin.ignore(); // для очищення буфера після вводу числа

        switch (choice) {
        case 1:
            cout << "Введіть рядок: ";
            getline(cin, input);
            break;

        case 2:
            if (input.empty()) {
                cout << "Спочатку введіть рядок.\n";
            }
            else if (isValidInput(input)) {
                cout << "Рядок коректний.\n";
            }
            else {
                cout << "Рядок містить некоректні символи.\n";
            }
            break;

        case 3:
            if (input.empty()) {
                cout << "Спочатку введіть рядок.\n";
            }
            else if (!isValidInput(input)) {
                cout << "Рядок некоректний. Обробка неможлива.\n";
            }
            else {
                string output = processString(input);
                cout << "Результат: " << output << endl;
            }
            break;
        case 4: {
            string inputFileName, outputFileName;
            cout << "Введіть назву вхідного файлу: ";
            getline(cin, inputFileName);
            cout << "Введіть назву вихідного файлу: ";
            getline(cin, outputFileName);

            ifstream inFile(inputFileName);
            ofstream outFile(outputFileName);

            if (!inFile.is_open()) {
                cout << "Не вдалося відкрити вхідний файл.\n";
                break;
            }

            if (!outFile.is_open()) {
                cout << "Не вдалося відкрити вихідний файл.\n";
                break;
            }

            string line;
            while (getline(inFile, line)) {
                if (isValidInput(line)) {
                    outFile << processString(line) << endl;
                }
                else {
                    outFile << "[Некоректний рядок]" << endl;
                }
            }

            cout << "Обробка завершена. Результат записано у файл '" << outputFileName << "'.\n";

            inFile.close();
            outFile.close();
            break;
        }

        case 0:
            cout << "Завершення програми.\n";
            break;

        default:
            cout << "Невірний вибір. Спробуйте ще раз.\n";
        }

    } while (choice != 0);

    return 0;
}

Лістинг коду до завдання 3
task1.h:
#pragma once

void runTask1(); // Реалізація пошуку підрядка

task1.cpp:
#include <iostream>
#include <Windows.h>
#include <string>
using namespace std;

void runTask1() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "");

    const char* text = "Hello, world!";
    const char* word = "world";

    size_t source_len = 0;
    while (text[source_len] != '\0') source_len++;

    size_t target_len = 0;
    while (word[target_len] != '\0') target_len++;

    size_t result;
    if (target_len == 0 || target_len > source_len) {
        result = string::npos;
    }
    else {
        result = string::npos;
        for (size_t i = 0; i <= source_len - target_len; ++i) {
            size_t j = 0;
            while (j < target_len && text[i + j] == word[j]) {
                ++j;
            }
            if (j == target_len) {
                result = i;
                break;
            }
        }
    }

    if (result != string::npos) {
        cout << "Слово знайдено на позиції: " << result << endl;
    }
    else {
        cout << "Не знайдено." << endl;
    }
}

task2.h:
#pragma once

void runTask2(); // Меню для обробки рядків

task2.cpp:
#include <iostream>
#include <string>
#include <fstream>
#include <Windows.h>
using namespace std;

void runTask2() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "");

    string input;
    int choice;

    do {
        cout << "\n--- Меню Завдання 2 ---\n";
        cout << "1. Ввести рядок\n";
        cout << "2. Перевірити рядок\n";
        cout << "3. Обробити рядок\n";
        cout << "4. Обробити файл\n";
        cout << "0. Назад до головного меню\n";
        cout << "Ваш вибір: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
        case 1:
            cout << "Введіть рядок: ";
            getline(cin, input);
            break;

        case 2: {
            if (input.empty()) {
                cout << "Спочатку введіть рядок.\n";
                break;
            }

            bool valid = true;
            for (char c : input) {
                if (c == ' ') continue;
                unsigned char uc = static_cast<unsigned char>(c);
                if (!((uc >= 192 && uc <= 223) || uc == 168 || uc == 170 || uc == 175 || uc == 178)) {
                    valid = false;
                    break;
                }
            }
            cout << (valid ? "Рядок коректний.\n" : "Некоректні символи у рядку.\n");
            break;
        }

        case 3: {
            if (input.empty()) {
                cout << "Спочатку введіть рядок.\n";
                break;
            }

            bool valid = true;
            for (char c : input) {
                if (c == ' ') continue;
                unsigned char uc = static_cast<unsigned char>(c);
                if (!((uc >= 192 && uc <= 223) || uc == 168 || uc == 170 || uc == 175 || uc == 178)) {
                    valid = false;
                    break;
                }
            }

            if (!valid) {
                cout << "Некоректний рядок.\n";
                break;
            }

            string result;
            size_t i = 0;
            while (i < input.length()) {
                while (i < input.length() && input[i] == ' ') {
                    result += ' ';
                    ++i;
                }

                size_t start = i;
                while (i < input.length() && input[i] != ' ') {
                    ++i;
                }

                if (start < i) {
                    string word = input.substr(start, i - start);
                    if (!word.empty()) {
                        char firstChar = word[0];
                        for (size_t j = 0; j < word.length(); ++j) {
                            if (j != 0 && word[j] == firstChar)
                                result += '.';
                            else
                                result += word[j];
                        }
                    }
                }
            }
            cout << "Результат: " << result << endl;
            break;
        }
        case 4: {
            string inName, outName;
            cout << "Ім'я вхідного файлу: "; getline(cin, inName);
            cout << "Ім'я вихідного файлу: "; getline(cin, outName);

            ifstream inFile(inName);
            ofstream outFile(outName);

            if (!inFile || !outFile) {
                cout << "Помилка відкриття файлів.\n";
                break;
            }
            string line;
            while (getline(inFile, line)) {
                bool valid = true;
                for (char c : line) {
                    if (c == ' ') continue;
                    unsigned char uc = static_cast<unsigned char>(c);
                    if (!((uc >= 192 && uc <= 223) || uc == 168 || uc == 170 || uc == 175 || uc == 178)) {
                        valid = false;
                        break;
                    }
                }
                if (!valid) {
                    outFile << "[Некоректний рядок]" << endl;
                }
                else {
                    string result;
                    size_t i = 0;
                    while (i < line.length()) {
                        while (i < line.length() && line[i] == ' ') {
                            result += ' ';
                            ++i;
                        }
                        size_t start = i;
                        while (i < line.length() && line[i] != ' ') {
                            ++i;
                        }
                        if (start < i) {
                            string word = line.substr(start, i - start);
                            if (!word.empty()) {
                                char firstChar = word[0];
                                for (size_t j = 0; j < word.length(); ++j) {
                                    if (j != 0 && word[j] == firstChar)
                                        result += '.';
                                    else
                                        result += word[j];
                                }
                            }
                        }
                    }
                    outFile << result << endl;
                }
            }
            cout << "Файл оброблено.\n";
            break;
        }
        case 0:
            cout << "Повернення до головного меню.\n";
            break;
        default:
            cout << "Невірний вибір.\n";
        }

    } while (choice != 0);
}
