#include <iostream>
#include <iomanip>
using namespace std;

// Функція для введення розмірів матриці (M і N)
void inputSize(int &M, int &N) {
    cout << "Введіть кількість рядків матриці (2-20): ";
    cin >> M;
    // Перевірка на допустимий діапазон
    while (M < 2 || M > 20) {
        cout << "Некоректне значення! Введіть ще раз (2-20): ";
        cin >> M;
    }

    cout << "Введіть кількість стовпців матриці (2-20): ";
    cin >> N;
    // Перевірка на допустимий діапазон
    while (N < 2 || N > 20) {
        cout << "Некоректне значення! Введіть ще раз (2-20): ";
        cin >> N;
    }
}

// Функція для введення розміру квадратної матриці (тільки M)
void inputSquareSize(int &M) {
    cout << "Введіть порядок квадратної матриці (2-20): ";
    cin >> M;
    // Перевірка на допустимий діапазон
    while (M < 2 || M > 20) {
        cout << "Некоректне значення! Введіть ще раз (2-20): ";
        cin >> M;
    }
}

// Функція для введення елементів матриці
void inputMatrix(int matrix[][20], int M, int N) {
    cout << "Введіть елементи матриці:\n";
    for (int i = 0; i < M; ++i) {
        for (int j = 0; j < N; ++j) {
            cin >> matrix[i][j];
             // Перевірка діапазону значення елемента
            while (matrix[i][j] < -1000000 || matrix[i][j] > 1000000) {
                cout << "Некоректне значення! Введіть ще раз: ";
                cin >> matrix[i][j];
            }
        }
    }
}

// Функція для виведення матриці
void outputMatrix(int matrix[][20], int M, int N) {
    cout << "Матриця:\n";
    for (int i = 0; i < M; ++i) {
        for (int j = 0; j < N; ++j) {
            // Форматований вивід кожного елемента з вирівнюванням
            cout << setw(8) << matrix[i][j];
        }
        cout << endl;
    }
}

// Функція для обробки Matrix30
// Обчислює середнє арифметичне кожного стовпця та рахує кількість елементів, більших за це середнє
void processMatrix30(int matrix[][20], int M, int N, int countAboveAverage[]) {
    for (int j = 0; j < N; ++j) {
        double sum = 0;
        
        // Сума всіх елементів стовпця
        for (int i = 0; i < M; ++i) {
            sum += matrix[i][j];
        }
        
        double average = sum / M;
        int count = 0;
        
        // Підрахунок кількості елементів у стовпці більші за середнє
        for (int i = 0; i < M; ++i) {
            if (matrix[i][j] > average) {
                count++;
            }
        }
        countAboveAverage[j] = count;
    }
}

// Функція для виведення результату Matrix30
// Виводить для кожного стовпця кількість елементів, які більші за середнє арифметичне
void outputResultMatrix30(int countAboveAverage[], int N) {
    cout << "\nКількість елементів у кожному стовпці, більших за середнє арифметичне:\n";
    for (int j = 0; j < N; ++j) {
        cout << "Стовпець " << j + 1 << ": " << countAboveAverage[j] << endl;
    }
}

// Функція для обробки Matrix81
// Обнуляє всі елементи вище головної діагоналі (i < j)
// та нижче побічної діагоналі (i > M - j - 1)
void processMatrix81(int matrix[][20], int M) {
    for (int i = 0; i < M; ++i) {
        for (int j = 0; j < M; ++j) {
            // Обнуляємо, якщо елемент або вище головної, або нижче побічної діагоналі
            matrix[i][j] *= !(i < j || i > M - j - 1);
        }
    }
}

// Основна функція для Matrix30
void taskMatrix30() {
    int matrix[20][20]; // Матриця для зберігання даних
    int countAboveAverage[20]; // Масив для зберігання результатів
    int M, N; // Розміри матриці

    inputSize(M, N); // Введення розмірів
    inputMatrix(matrix, M, N); // Введення елементів
    outputMatrix(matrix, M, N); // Виведення початкової матриці
    processMatrix30(matrix, M, N, countAboveAverage); // Обробка
    outputResultMatrix30(countAboveAverage, N); // Виведення результатів
}

// Основна функція для Matrix81
void taskMatrix81() {
    int matrix[20][20]; // Квадратна матриця
    int M; // Розмір квадратної матриці

    inputSquareSize(M); // Введення порядку матриці
    inputMatrix(matrix, M, M); // Введення елементів
    outputMatrix(matrix, M, M); // Виведення початкової матриці
    processMatrix81(matrix, M); // Обробка — обнулення елементів
    cout << "\nМатриця після обнулення елементів:\n";
    outputMatrix(matrix, M, M);  // Виведення результату
}

// Функція для багаторазового вибору завдання
void mainMenu() {
    int choice;
    do {
         // Меню
        cout << "\nОберіть завдання:\n";
        cout << "1 - Виконати Завдання1\n"; // Matrix30
        cout << "2 - Виконати Завдання2\n"; // Matrix81
        cout << "0 - Вийти\n";
        cout << "Ваш вибір: ";
        cin >> choice;

        // Обробка вибору
        switch (choice) {
            case 1:
                taskMatrix30(); // Виконання першого завдання
                break;
            case 2:
                taskMatrix81(); // Виконання другого завдання
                break;
            case 0:
                cout << "Завершення програми.\n";
                break;
            default:
                cout << "Некоректний вибір! Спробуйте ще раз.\n";
        }
    } while (choice != 0); // Повторювати, поки не обрано вихід
}

// Точка входу в програму
int main() {
    mainMenu(); // Виклик головного меню
    return 0;
}
